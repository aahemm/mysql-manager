// Smart relocation:
DONE	this.registerAPIRequest(m, "relocate/:host/:port/:belowHost/:belowPort", this.RelocateBelow)
DONE	this.registerAPIRequest(m, "relocate-below/:host/:port/:belowHost/:belowPort", this.RelocateBelow)
DONE	this.registerAPIRequest(m, "relocate-slaves/:host/:port/:belowHost/:belowPort", this.RelocateReplicas)
DONE	this.registerAPIRequest(m, "regroup-slaves/:host/:port", this.RegroupReplicas)

	// Classic file:pos relocation:
	this.registerAPIRequest(m, "move-up/:host/:port", this.MoveUp)
	this.registerAPIRequest(m, "move-up-slaves/:host/:port", this.MoveUpReplicas)
	this.registerAPIRequest(m, "move-below/:host/:port/:siblingHost/:siblingPort", this.MoveBelow)
	this.registerAPIRequest(m, "move-equivalent/:host/:port/:belowHost/:belowPort", this.MoveEquivalent)
	this.registerAPIRequest(m, "repoint/:host/:port/:belowHost/:belowPort", this.Repoint)
	this.registerAPIRequest(m, "repoint-slaves/:host/:port", this.RepointReplicas)
	this.registerAPIRequest(m, "make-co-master/:host/:port", this.MakeCoMaster)
	this.registerAPIRequest(m, "enslave-siblings/:host/:port", this.TakeSiblings)
	this.registerAPIRequest(m, "enslave-master/:host/:port", this.TakeMaster)
	this.registerAPIRequest(m, "master-equivalent/:host/:port/:logFile/:logPos", this.MasterEquivalent)

	// Binlog server relocation:
	this.registerAPIRequest(m, "regroup-slaves-bls/:host/:port", this.RegroupReplicasBinlogServers)

	// GTID relocation:
	this.registerAPIRequest(m, "move-below-gtid/:host/:port/:belowHost/:belowPort", this.MoveBelowGTID)
	this.registerAPIRequest(m, "move-slaves-gtid/:host/:port/:belowHost/:belowPort", this.MoveReplicasGTID)
	this.registerAPIRequest(m, "regroup-slaves-gtid/:host/:port", this.RegroupReplicasGTID)

	// Pseudo-GTID relocation:
	this.registerAPIRequest(m, "match/:host/:port/:belowHost/:belowPort", this.MatchBelow)
	this.registerAPIRequest(m, "match-below/:host/:port/:belowHost/:belowPort", this.MatchBelow)
	this.registerAPIRequest(m, "match-up/:host/:port", this.MatchUp)
	this.registerAPIRequest(m, "match-slaves/:host/:port/:belowHost/:belowPort", this.MultiMatchReplicas)
	this.registerAPIRequest(m, "match-up-slaves/:host/:port", this.MatchUpReplicas)
	this.registerAPIRequest(m, "regroup-slaves-pgtid/:host/:port", this.RegroupReplicasPseudoGTID)
	// Legacy, need to revisit:
	this.registerAPIRequest(m, "make-master/:host/:port", this.MakeMaster)
	this.registerAPIRequest(m, "make-local-master/:host/:port", this.MakeLocalMaster)

	// Replication, general:
	this.registerAPIRequest(m, "enable-gtid/:host/:port", this.EnableGTID)
	this.registerAPIRequest(m, "disable-gtid/:host/:port", this.DisableGTID)
	this.registerAPIRequest(m, "locate-gtid-errant/:host/:port", this.LocateErrantGTID)
	this.registerAPIRequest(m, "gtid-errant-reset-master/:host/:port", this.ErrantGTIDResetMaster)
	this.registerAPIRequest(m, "gtid-errant-inject-empty/:host/:port", this.ErrantGTIDInjectEmpty)
	this.registerAPIRequest(m, "skip-query/:host/:port", this.SkipQuery)
	this.registerAPIRequest(m, "start-slave/:host/:port", this.StartReplication)
	this.registerAPIRequest(m, "restart-slave/:host/:port", this.RestartReplication)
	this.registerAPIRequest(m, "stop-slave/:host/:port", this.StopReplication)
	this.registerAPIRequest(m, "stop-slave-nice/:host/:port", this.StopReplicationNicely)
	this.registerAPIRequest(m, "reset-slave/:host/:port", this.ResetReplication)
	this.registerAPIRequest(m, "detach-slave/:host/:port", this.DetachReplicaMasterHost)
	this.registerAPIRequest(m, "reattach-slave/:host/:port", this.ReattachReplicaMasterHost)
	this.registerAPIRequest(m, "detach-slave-master-host/:host/:port", this.DetachReplicaMasterHost)
	this.registerAPIRequest(m, "reattach-slave-master-host/:host/:port", this.ReattachReplicaMasterHost)
	this.registerAPIRequest(m, "flush-binary-logs/:host/:port", this.FlushBinaryLogs)
	this.registerAPIRequest(m, "purge-binary-logs/:host/:port/:logFile", this.PurgeBinaryLogs)
	this.registerAPIRequest(m, "restart-slave-statements/:host/:port", this.RestartReplicationStatements)
	this.registerAPIRequest(m, "enable-semi-sync-master/:host/:port", this.EnableSemiSyncMaster)
	this.registerAPIRequest(m, "disable-semi-sync-master/:host/:port", this.DisableSemiSyncMaster)
	this.registerAPIRequest(m, "enable-semi-sync-replica/:host/:port", this.EnableSemiSyncReplica)
	this.registerAPIRequest(m, "disable-semi-sync-replica/:host/:port", this.DisableSemiSyncReplica)
	this.registerAPIRequest(m, "delay-replication/:host/:port/:seconds", this.DelayReplication)

	// Replication information:
	this.registerAPIRequest(m, "can-replicate-from/:host/:port/:belowHost/:belowPort", this.CanReplicateFrom)
	this.registerAPIRequest(m, "can-replicate-from-gtid/:host/:port/:belowHost/:belowPort", this.CanReplicateFromGTID)

	// Instance:
	this.registerAPIRequest(m, "set-read-only/:host/:port", this.SetReadOnly)
	this.registerAPIRequest(m, "set-writeable/:host/:port", this.SetWriteable)
	this.registerAPIRequest(m, "kill-query/:host/:port/:process", this.KillQuery)

	// Binary logs:
	this.registerAPIRequest(m, "last-pseudo-gtid/:host/:port", this.LastPseudoGTID)

	// Pools:
	this.registerAPIRequest(m, "submit-pool-instances/:pool", this.SubmitPoolInstances)
	this.registerAPIRequest(m, "cluster-pool-instances/:clusterName", this.ReadClusterPoolInstancesMap)
	this.registerAPIRequest(m, "cluster-pool-instances/:clusterName/:pool", this.ReadClusterPoolInstancesMap)
	this.registerAPIRequest(m, "heuristic-cluster-pool-instances/:clusterName", this.GetHeuristicClusterPoolInstances)
	this.registerAPIRequest(m, "heuristic-cluster-pool-instances/:clusterName/:pool", this.GetHeuristicClusterPoolInstances)
	this.registerAPIRequest(m, "heuristic-cluster-pool-lag/:clusterName", this.GetHeuristicClusterPoolInstancesLag)
	this.registerAPIRequest(m, "heuristic-cluster-pool-lag/:clusterName/:pool", this.GetHeuristicClusterPoolInstancesLag)


	// Cluster
	this.registerAPIRequest(m, "cluster/:clusterHint", this.Cluster)
	this.registerAPIRequest(m, "cluster/alias/:clusterAlias", this.ClusterByAlias)
	this.registerAPIRequest(m, "cluster/instance/:host/:port", this.ClusterByInstance)
	this.registerAPIRequest(m, "cluster-info/:clusterHint", this.ClusterInfo)
	this.registerAPIRequest(m, "cluster-info/alias/:clusterAlias", this.ClusterInfoByAlias)
	this.registerAPIRequest(m, "cluster-osc-slaves/:clusterHint", this.ClusterOSCReplicas)
	this.registerAPIRequest(m, "set-cluster-alias/:clusterName", this.SetClusterAliasManualOverride)
	this.registerAPIRequest(m, "clusters", this.Clusters)
	this.registerAPIRequest(m, "clusters-info", this.ClustersInfo)

	this.registerAPIRequest(m, "masters", this.Masters)
	this.registerAPIRequest(m, "master/:clusterHint", this.ClusterMaster)
	this.registerAPIRequest(m, "instance-replicas/:host/:port", this.InstanceReplicas)
	this.registerAPIRequest(m, "all-instances", this.AllInstances)
	this.registerAPIRequest(m, "downtimed", this.Downtimed)
	this.registerAPIRequest(m, "downtimed/:clusterHint", this.Downtimed)
	this.registerAPIRequest(m, "topology/:clusterHint", this.AsciiTopology)
	this.registerAPIRequest(m, "topology/:host/:port", this.AsciiTopology)
	this.registerAPIRequest(m, "topology-tabulated/:clusterHint", this.AsciiTopologyTabulated)
	this.registerAPIRequest(m, "topology-tabulated/:host/:port", this.AsciiTopologyTabulated)
	this.registerAPIRequest(m, "topology-tags/:clusterHint", this.AsciiTopologyTags)
	this.registerAPIRequest(m, "topology-tags/:host/:port", this.AsciiTopologyTags)
	this.registerAPIRequest(m, "snapshot-topologies", this.SnapshotTopologies)

	// Key-value:
	this.registerAPIRequest(m, "submit-masters-to-kv-stores", this.SubmitMastersToKvStores)
	this.registerAPIRequest(m, "submit-masters-to-kv-stores/:clusterHint", this.SubmitMastersToKvStores)

	// Instance management:
	this.registerAPIRequest(m, "instance/:host/:port", this.Instance)
	this.registerAPIRequest(m, "discover/:host/:port", this.Discover)
	this.registerAPIRequest(m, "async-discover/:host/:port", this.AsyncDiscover)
	this.registerAPIRequest(m, "refresh/:host/:port", this.Refresh)
	this.registerAPIRequest(m, "forget/:host/:port", this.Forget)
	this.registerAPIRequest(m, "forget-cluster/:clusterHint", this.ForgetCluster)
	this.registerAPIRequest(m, "begin-maintenance/:host/:port/:owner/:reason", this.BeginMaintenance)
	this.registerAPIRequest(m, "end-maintenance/:host/:port", this.EndMaintenanceByInstanceKey)
	this.registerAPIRequest(m, "in-maintenance/:host/:port", this.InMaintenance)
	this.registerAPIRequest(m, "end-maintenance/:maintenanceKey", this.EndMaintenance)
	this.registerAPIRequest(m, "maintenance", this.Maintenance)
	this.registerAPIRequest(m, "begin-downtime/:host/:port/:owner/:reason", this.BeginDowntime)
	this.registerAPIRequest(m, "begin-downtime/:host/:port/:owner/:reason/:duration", this.BeginDowntime)
	this.registerAPIRequest(m, "end-downtime/:host/:port", this.EndDowntime)

	// Recovery:
	this.registerAPIRequest(m, "replication-analysis", this.ReplicationAnalysis)
	this.registerAPIRequest(m, "replication-analysis/:clusterName", this.ReplicationAnalysisForCluster)
	this.registerAPIRequest(m, "replication-analysis/instance/:host/:port", this.ReplicationAnalysisForKey)
	this.registerAPIRequest(m, "recover/:host/:port", this.Recover)
	this.registerAPIRequest(m, "recover/:host/:port/:candidateHost/:candidatePort", this.Recover)
	this.registerAPIRequest(m, "recover-lite/:host/:port", this.RecoverLite)
	this.registerAPIRequest(m, "recover-lite/:host/:port/:candidateHost/:candidatePort", this.RecoverLite)
	this.registerAPIRequest(m, "graceful-master-takeover/:host/:port", this.GracefulMasterTakeover)
	this.registerAPIRequest(m, "graceful-master-takeover/:host/:port/:designatedHost/:designatedPort", this.GracefulMasterTakeover)
	this.registerAPIRequest(m, "graceful-master-takeover/:clusterHint", this.GracefulMasterTakeover)
	this.registerAPIRequest(m, "graceful-master-takeover/:clusterHint/:designatedHost/:designatedPort", this.GracefulMasterTakeover)
	this.registerAPIRequest(m, "graceful-master-takeover-auto/:host/:port", this.GracefulMasterTakeoverAuto)
	this.registerAPIRequest(m, "graceful-master-takeover-auto/:host/:port/:designatedHost/:designatedPort", this.GracefulMasterTakeoverAuto)
	this.registerAPIRequest(m, "graceful-master-takeover-auto/:clusterHint", this.GracefulMasterTakeoverAuto)
	this.registerAPIRequest(m, "graceful-master-takeover-auto/:clusterHint/:designatedHost/:designatedPort", this.GracefulMasterTakeoverAuto)
	this.registerAPIRequest(m, "force-master-failover/:host/:port", this.ForceMasterFailover)
	this.registerAPIRequest(m, "force-master-failover/:clusterHint", this.ForceMasterFailover)
	this.registerAPIRequest(m, "force-master-takeover/:clusterHint/:designatedHost/:designatedPort", this.ForceMasterTakeover)
	this.registerAPIRequest(m, "force-master-takeover/:host/:port/:designatedHost/:designatedPort", this.ForceMasterTakeover)
	this.registerAPIRequest(m, "register-candidate/:host/:port/:promotionRule", this.RegisterCandidate)
	this.registerAPIRequest(m, "automated-recovery-filters", this.AutomatedRecoveryFilters)
	this.registerAPIRequest(m, "audit-failure-detection", this.AuditFailureDetection)
	this.registerAPIRequest(m, "audit-failure-detection/:page", this.AuditFailureDetection)
	this.registerAPIRequest(m, "audit-failure-detection/id/:id", this.AuditFailureDetection)
	this.registerAPIRequest(m, "audit-failure-detection/alias/:clusterAlias", this.AuditFailureDetection)
	this.registerAPIRequest(m, "audit-failure-detection/alias/:clusterAlias/:page", this.AuditFailureDetection)
	this.registerAPIRequest(m, "replication-analysis-changelog", this.ReadReplicationAnalysisChangelog)
	this.registerAPIRequest(m, "audit-recovery", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/:page", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/id/:id", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/uid/:uid", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/cluster/:clusterName", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/cluster/:clusterName/:page", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/alias/:clusterAlias", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery/alias/:clusterAlias/:page", this.AuditRecovery)
	this.registerAPIRequest(m, "audit-recovery-steps/:uid", this.AuditRecoverySteps)
	this.registerAPIRequest(m, "active-cluster-recovery/:clusterName", this.ActiveClusterRecovery)
	this.registerAPIRequest(m, "recently-active-cluster-recovery/:clusterName", this.RecentlyActiveClusterRecovery)
	this.registerAPIRequest(m, "recently-active-instance-recovery/:host/:port", this.RecentlyActiveInstanceRecovery)
	this.registerAPIRequest(m, "ack-recovery/cluster/:clusterHint", this.AcknowledgeClusterRecoveries)
	this.registerAPIRequest(m, "ack-recovery/cluster/alias/:clusterAlias", this.AcknowledgeClusterRecoveries)
	this.registerAPIRequest(m, "ack-recovery/instance/:host/:port", this.AcknowledgeInstanceRecoveries)
	this.registerAPIRequest(m, "ack-recovery/:recoveryId", this.AcknowledgeRecovery)
	this.registerAPIRequest(m, "ack-recovery/uid/:uid", this.AcknowledgeRecovery)
	this.registerAPIRequest(m, "ack-all-recoveries", this.AcknowledgeAllRecoveries)
	this.registerAPIRequest(m, "blocked-recoveries", this.BlockedRecoveries)
	this.registerAPIRequest(m, "blocked-recoveries/cluster/:clusterName", this.BlockedRecoveries)
	this.registerAPIRequest(m, "disable-global-recoveries", this.DisableGlobalRecoveries)
	this.registerAPIRequest(m, "enable-global-recoveries", this.EnableGlobalRecoveries)
	this.registerAPIRequest(m, "check-global-recoveries", this.CheckGlobalRecoveries)

	// General
	this.registerAPIRequest(m, "problems", this.Problems)
	this.registerAPIRequest(m, "problems/:clusterName", this.Problems)
	this.registerAPIRequest(m, "audit", this.Audit)
	this.registerAPIRequest(m, "audit/:page", this.Audit)
	this.registerAPIRequest(m, "audit/instance/:host/:port", this.Audit)
	this.registerAPIRequest(m, "audit/instance/:host/:port/:page", this.Audit)
	this.registerAPIRequest(m, "resolve/:host/:port", this.Resolve)

	// Meta, no proxy
	this.registerAPIRequestNoProxy(m, "headers", this.Headers)
	this.registerAPIRequestNoProxy(m, "health", this.Health)
	this.registerAPIRequestNoProxy(m, "lb-check", this.LBCheck)
	this.registerAPIRequestNoProxy(m, "_ping", this.LBCheck)
	this.registerAPIRequestNoProxy(m, "leader-check", this.LeaderCheck)
	this.registerAPIRequestNoProxy(m, "leader-check/:errorStatusCode", this.LeaderCheck)
	this.registerAPIRequestNoProxy(m, "grab-election", this.GrabElection)
	this.registerAPIRequest(m, "raft-add-peer/:addr", this.RaftAddPeer)       // delegated to the raft leader
	this.registerAPIRequest(m, "raft-remove-peer/:addr", this.RaftRemovePeer) // delegated to the raft leader
	this.registerAPIRequestNoProxy(m, "raft-yield/:node", this.RaftYield)
	this.registerAPIRequestNoProxy(m, "raft-yield-hint/:hint", this.RaftYieldHint)
	this.registerAPIRequestNoProxy(m, "raft-peers", this.RaftPeers)
	this.registerAPIRequestNoProxy(m, "raft-state", this.RaftState)
	this.registerAPIRequestNoProxy(m, "raft-leader", this.RaftLeader)
	this.registerAPIRequestNoProxy(m, "raft-health", this.RaftHealth)
	this.registerAPIRequestNoProxy(m, "raft-status", this.RaftStatus)
	this.registerAPIRequestNoProxy(m, "raft-snapshot", this.RaftSnapshot)
	this.registerAPIRequestNoProxy(m, "raft-follower-health-report/:authenticationToken/:raftBind/:raftAdvertise", this.RaftFollowerHealthReport)
	this.registerAPIRequestNoProxy(m, "reload-configuration", this.ReloadConfiguration)
	this.registerAPIRequestNoProxy(m, "hostname-resolve-cache", this.HostnameResolveCache)
	this.registerAPIRequestNoProxy(m, "reset-hostname-resolve-cache", this.ResetHostnameResolveCache)
	// Meta
	this.registerAPIRequest(m, "routed-leader-check", this.LeaderCheck)
	this.registerAPIRequest(m, "reelect", this.Reelect)
	this.registerAPIRequest(m, "reload-cluster-alias", this.ReloadClusterAlias)
	this.registerAPIRequest(m, "deregister-hostname-unresolve/:host/:port", this.DeregisterHostnameUnresolve)
	this.registerAPIRequest(m, "register-hostname-unresolve/:host/:port/:virtualname", this.RegisterHostnameUnresolve)

	// Bulk access to information
	this.registerAPIRequest(m, "bulk-instances", this.BulkInstances)
	this.registerAPIRequest(m, "bulk-promotion-rules", this.BulkPromotionRules)

	// Agents
	this.registerAPIRequest(m, "agents", this.Agents)
	this.registerAPIRequest(m, "agent/:host", this.Agent)
	this.registerAPIRequest(m, "agent-umount/:host", this.AgentUnmount)
	this.registerAPIRequest(m, "agent-mount/:host", this.AgentMountLV)
	this.registerAPIRequest(m, "agent-create-snapshot/:host", this.AgentCreateSnapshot)
	this.registerAPIRequest(m, "agent-removelv/:host", this.AgentRemoveLV)
	this.registerAPIRequest(m, "agent-mysql-stop/:host", this.AgentMySQLStop)
	this.registerAPIRequest(m, "agent-mysql-start/:host", this.AgentMySQLStart)
	this.registerAPIRequest(m, "agent-seed/:targetHost/:sourceHost", this.AgentSeed)
	this.registerAPIRequest(m, "agent-active-seeds/:host", this.AgentActiveSeeds)
	this.registerAPIRequest(m, "agent-recent-seeds/:host", this.AgentRecentSeeds)
	this.registerAPIRequest(m, "agent-seed-details/:seedId", this.AgentSeedDetails)
	this.registerAPIRequest(m, "agent-seed-states/:seedId", this.AgentSeedStates)
	this.registerAPIRequest(m, "agent-abort-seed/:seedId", this.AbortSeed)
	this.registerAPIRequest(m, "agent-custom-command/:host/:command", this.AgentCustomCommand)
	this.registerAPIRequest(m, "seeds", this.Seeds)

